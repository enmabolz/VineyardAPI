// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VineyardAPI.Data;

#nullable disable

namespace VineyardAPI.Migrations
{
    [DbContext(typeof(VineyardContext))]
    partial class VineyardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VineyardAPI.Models.Grape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Grapes");
                });

            modelBuilder.Entity("VineyardAPI.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("VineyardAPI.Models.Parcel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<int>("GrapeId")
                        .HasColumnType("int");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("VineyardId")
                        .HasColumnType("int");

                    b.Property<int>("YearPlanted")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GrapeId");

                    b.HasIndex("ManagerId");

                    b.HasIndex("VineyardId");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("VineyardAPI.Models.Vineyard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vineyards");
                });

            modelBuilder.Entity("VineyardAPI.Models.Parcel", b =>
                {
                    b.HasOne("VineyardAPI.Models.Grape", "Grape")
                        .WithMany("Parcels")
                        .HasForeignKey("GrapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VineyardAPI.Models.Manager", "Manager")
                        .WithMany("Parcels")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VineyardAPI.Models.Vineyard", "Vineyard")
                        .WithMany("Parcels")
                        .HasForeignKey("VineyardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grape");

                    b.Navigation("Manager");

                    b.Navigation("Vineyard");
                });

            modelBuilder.Entity("VineyardAPI.Models.Grape", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("VineyardAPI.Models.Manager", b =>
                {
                    b.Navigation("Parcels");
                });

            modelBuilder.Entity("VineyardAPI.Models.Vineyard", b =>
                {
                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
